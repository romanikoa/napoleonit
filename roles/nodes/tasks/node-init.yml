---
# tasks file for mongodb nodes
- name: "create docker build directory"
  sudo: yes
  file: path=/dock state=directory

- name: copy dockerfile
  sudo: yes
  template: 
    src: Dockerfile.j2 
    dest: "/dock/Dockerfile"
  when:  ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: copy dockerfile
  sudo: yes
  template: 
    src: Dockerfile-centos.j2 
    dest: "/dock/Dockerfile"
  when:  ansible_distribution != 'Debian' and ansible_distribution != 'Ubuntu'

- name: "mongo: copy change_uid.sh for dockerfile"
  sudo: yes
  template: 
    src: change_uid.sh.j2 
    dest: "/dock/change_uid.sh"
  when:  ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: "mongo: build mongo-oem image"
  sudo: yes
  shell: docker build -t mongo-oem .
  args:
    chdir: /dock

- name: Create the mongodb user
  sudo: yes
  user: name=mongodb uid={{ mongo_uid }} comment="MongoDB"

- name: Create the data directory for the namenode metadata
  sudo: yes
  file: path={{ mongodb_datadir_prefix }} owner={{ mongo_user}} group={{ mongo_user}} state=directory

- name: create data directory for mongodb
  sudo: yes
  file: path={{ mongodb_datadir_prefix }}/db state=directory owner={{ mongo_user}} group={{ mongo_user}}

- name: create directory for mongo config
  sudo: yes
  file: path={{ mongodb_confdir }} state=directory mode=0755 owner={{ mongo_user}} group={{ mongo_user}}

- name: Create the mongodb configuration file
  sudo: yes
  template: 
    src: mongo.conf.j2 
    dest: "{{ mongodb_confdir }}/mongo.conf"
    owner: "{{ mongo_user}}"
    group: "{{ mongo_user}}"
  when:  ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: Create the mongodb configuration file
  sudo: yes
  template: 
    src: mongo-centos.conf.j2 
    dest: "{{ mongodb_confdir }}/mongo.conf"
    owner: "{{ mongo_user}}"
    group: "{{ mongo_user}}"
  when:  ansible_distribution != 'Debian' and ansible_distribution != 'Ubuntu'

- name: mongo:copy service config
  sudo: yes
  template:
    src: mongo.service.j2
    dest: /etc/systemd/system/mongo.service
    backup: yes
    owner: mongodb
    group: mongodb

- name: mongo enable mongodb service
  sudo: yes
  service: name=mongo enabled=yes

- name: mongodb.service enabled
  sudo: yes
  shell: systemctl enable mongo.service
  tags: systemctl

- name: reload service
  sudo: yes
  shell: systemctl daemon-reload
  tags: systemctl

- name: mongo start service
  sudo: yes
  service: name=mongo state=started